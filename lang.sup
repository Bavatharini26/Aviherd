import React, { useState, useEffect, useRef } from 'react';
import { 
  Camera, 
  Activity, 
  AlertTriangle, 
  CheckCircle, 
  MessageCircle, 
  BarChart3, 
  Settings, 
  Phone, 
  Mic, 
  Send, 
  MapPin, 
  Thermometer, 
  Droplets, 
  Wind,
  Battery,
  Wifi,
  Bell,
  User,
  Calendar,
  TrendingUp,
  Shield,
  Heart,
  Zap,
  Eye,
  Clock,
  DollarSign,
  Users,
  Home,
  Play,
  Pause,
  Volume2,
  VolumeX
} from 'lucide-react';

const AVIHERD_PROTOTYPE = () => {
  const [currentView, setCurrentView] = useState('dashboard');
  const [isRecording, setIsRecording] = useState(false);
  const [chatMessages, setChatMessages] = useState([]);
  const [currentMessage, setCurrentMessage] = useState('');
  const [selectedLanguage, setSelectedLanguage] = useState('hindi');
  const [alerts, setAlerts] = useState([]);
  const [livestockData, setLivestockData] = useState({});
  const [isVideoPlaying, setIsVideoPlaying] = useState(true);
  const [audioEnabled, setAudioEnabled] = useState(true);
  const videoRef = useRef(null);

  // Simulated real-time data
  useEffect(() => {
    const interval = setInterval(() => {
      // Update livestock health data
      setLivestockData(prev => ({
        ...prev,
        temperature: 24 + Math.random() * 6,
        humidity: 60 + Math.random() * 20,
        airQuality: 85 + Math.random() * 10,
        healthyAnimals: 287 + Math.floor(Math.random() * 5),
        totalAnimals: 295,
        feedConsumption: 85 + Math.random() * 10,
        waterConsumption: 92 + Math.random() * 5,
        batteryLevel: 87,
        connectivity: 'Strong'
      }));

      // Generate random alerts
      if (Math.random() < 0.1) {
        const alertTypes = [
          { type: 'health', message: 'Abnormal behavior detected in Pen 3', severity: 'medium' },
          { type: 'environment', message: 'Temperature spike in Poultry Section B', severity: 'high' },
          { type: 'feeding', message: 'Reduced feeding activity in Pig Farm A', severity: 'low' },
          { type: 'security', message: 'Unusual movement detected near perimeter', severity: 'medium' }
        ];
        const newAlert = {
          id: Date.now(),
          ...alertTypes[Math.floor(Math.random() * alertTypes.length)],
          timestamp: new Date().toLocaleTimeString(),
          isNew: true
        };
        setAlerts(prev => [newAlert, ...prev.slice(0, 9)]);
        
        // Auto-remove 'new' status after 3 seconds
        setTimeout(() => {
          setAlerts(prev => prev.map(alert => 
            alert.id === newAlert.id ? { ...alert, isNew: false } : alert
          ));
        }, 3000);
      }
    }, 2000);

    return () => clearInterval(interval);
  }, []);

  // Initialize chat with welcome message
  useEffect(() => {
    setChatMessages([
      {
        id: 1,
        sender: 'ai',
        message: '‡§®‡§Æ‡§∏‡•ç‡§§‡•á! ‡§Æ‡•à‡§Ç AVIHERD AI ‡§Ö‡§∏‡§ø‡§∏‡•ç‡§ü‡•á‡§Ç‡§ü ‡§π‡•Ç‡§Ç‡•§ ‡§Ü‡§™‡§ï‡•á ‡§™‡§∂‡•Å‡§ì‡§Ç ‡§ï‡•Ä ‡§∏‡•á‡§π‡§§ ‡§ï‡•á ‡§¨‡§æ‡§∞‡•á ‡§Æ‡•á‡§Ç ‡§ï‡•Å‡§õ ‡§≠‡•Ä ‡§™‡•Ç‡§õ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç‡•§',
        translation: 'Hello! I am AVIHERD AI Assistant. You can ask me anything about your livestock health.',
        timestamp: new Date().toLocaleTimeString()
      }
    ]);
  }, []);

  const languages = {
    hindi: { name: '‡§π‡§ø‡§Ç‡§¶‡•Ä', flag: 'üáÆüá≥' },
    english: { name: 'English', flag: 'üá¨üáß' },
    tamil: { name: '‡Æ§‡ÆÆ‡Æø‡Æ¥‡Øç', flag: 'üáÆüá≥' },
    telugu: { name: '‡∞§‡±Ü‡∞≤‡±Å‡∞ó‡±Å', flag: 'üáÆüá≥' },
    marathi: { name: '‡§Æ‡§∞‡§æ‡§†‡•Ä', flag: 'üáÆüá≥' },
    kannada: { name: '‡≤ï‡≤®‡≥ç‡≤®‡≤°', flag: 'üáÆüá≥' }
  };

  const sampleResponses = {
    hindi: [
      { question: '‡§Æ‡•á‡§∞‡•á ‡§Æ‡•Å‡§∞‡•ç‡§ó‡§ø‡§Ø‡•ã‡§Ç ‡§Æ‡•á‡§Ç ‡§∏‡•á ‡§ï‡•Å‡§õ ‡§ï‡§Æ ‡§ñ‡§æ ‡§∞‡§π‡•á ‡§π‡•à‡§Ç', answer: '‡§Ø‡§π ‡§∏‡§Ç‡§ï‡•ç‡§∞‡§Æ‡§£ ‡§ï‡§æ ‡§∂‡•Å‡§∞‡•Å‡§Ü‡§§‡•Ä ‡§≤‡§ï‡•ç‡§∑‡§£ ‡§π‡•ã ‡§∏‡§ï‡§§‡§æ ‡§π‡•à‡•§ ‡§§‡•Å‡§∞‡§Ç‡§§ ‡§â‡§®‡•ç‡§π‡•á‡§Ç ‡§Ö‡§≤‡§ó ‡§ï‡§∞‡•á‡§Ç ‡§î‡§∞ ‡§™‡§∂‡•Å ‡§ö‡§ø‡§ï‡§ø‡§§‡•ç‡§∏‡§ï ‡§ï‡•ã ‡§¶‡§ø‡§ñ‡§æ‡§è‡§Ç‡•§' },
      { question: '‡§™‡§∂‡•Å‡§ì‡§Ç ‡§ï‡§æ ‡§§‡§æ‡§™‡§Æ‡§æ‡§® ‡§ï‡•à‡§∏‡•á ‡§ö‡•á‡§ï ‡§ï‡§∞‡•á‡§Ç', answer: 'AVIHERD ‡§ï‡•á ‡§•‡§∞‡•ç‡§Æ‡§≤ ‡§ï‡•à‡§Æ‡§∞‡•á ‡§Ü‡§™‡§ï‡•á ‡§™‡§∂‡•Å‡§ì‡§Ç ‡§ï‡§æ ‡§§‡§æ‡§™‡§Æ‡§æ‡§® 24/7 ‡§Æ‡•â‡§®‡§ø‡§ü‡§∞ ‡§ï‡§∞‡§§‡•á ‡§π‡•à‡§Ç‡•§ ‡§Ö‡§∏‡§æ‡§Æ‡§æ‡§®‡•ç‡§Ø ‡§§‡§æ‡§™‡§Æ‡§æ‡§® ‡§ï‡•Ä ‡§∏‡•ç‡§•‡§ø‡§§‡§ø ‡§Æ‡•á‡§Ç ‡§Ö‡§≤‡§∞‡•ç‡§ü ‡§Æ‡§ø‡§≤‡•á‡§ó‡§æ‡•§' },
      { question: '‡§¨‡§æ‡§∞‡§ø‡§∂ ‡§Æ‡•á‡§Ç ‡§ï‡•ç‡§Ø‡§æ ‡§∏‡§æ‡§µ‡§ß‡§æ‡§®‡•Ä ‡§¨‡§∞‡§§‡•á‡§Ç', answer: '‡§¨‡§æ‡§∞‡§ø‡§∂ ‡§Æ‡•á‡§Ç ‡§™‡§∂‡•Å‡§ì‡§Ç ‡§ï‡•ã ‡§∏‡•Ç‡§ñ‡•Ä ‡§ú‡§ó‡§π ‡§∞‡§ñ‡•á‡§Ç, ‡§∏‡§æ‡§´ ‡§™‡§æ‡§®‡•Ä ‡§¶‡•á‡§Ç ‡§î‡§∞ ‡§´‡§∞‡•ç‡§∂ ‡§ï‡•ã ‡§∏‡•Ç‡§ñ‡§æ ‡§∞‡§ñ‡•á‡§Ç‡•§ ‡§∏‡§Ç‡§ï‡•ç‡§∞‡§Æ‡§£ ‡§∏‡•á ‡§¨‡§ö‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§∏‡§´‡§æ‡§à ‡§ï‡§æ ‡§µ‡§ø‡§∂‡•á‡§∑ ‡§ß‡•ç‡§Ø‡§æ‡§® ‡§¶‡•á‡§Ç‡•§' }
    ]
  };

  const handleSendMessage = () => {
    if (!currentMessage.trim()) return;

    const userMessage = {
      id: Date.now(),
      sender: 'user',
      message: currentMessage,
      timestamp: new Date().toLocaleTimeString()
    };

    setChatMessages(prev => [...prev, userMessage]);

    // Simulate AI response
    setTimeout(() => {
      const responses = sampleResponses[selectedLanguage] || sampleResponses.hindi;
      const randomResponse = responses[Math.floor(Math.random() * responses.length)];
      
      const aiMessage = {
        id: Date.now() + 1,
        sender: 'ai',
        message: randomResponse.answer,
        timestamp: new Date().toLocaleTimeString()
      };
      setChatMessages(prev => [...prev, aiMessage]);
    }, 1500);

    setCurrentMessage('');
  };

  const handleVoiceRecord = () => {
    setIsRecording(!isRecording);
    if (!isRecording) {
      // Simulate voice input after 3 seconds
      setTimeout(() => {
        setIsRecording(false);
        setCurrentMessage('‡§Æ‡•á‡§∞‡•á ‡§™‡§∂‡•Å‡§ì‡§Ç ‡§ï‡•Ä ‡§∏‡•á‡§π‡§§ ‡§ï‡•à‡§∏‡•Ä ‡§π‡•à?');
      }, 3000);
    }
  };

  const renderDashboard = () => (
    <div className="space-y-6">
      {/* Header Stats */}
      <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
        <div className="bg-gradient-to-r from-green-500 to-green-600 rounded-xl p-4 text-white">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-green-100">‡§∏‡•ç‡§µ‡§∏‡•ç‡§• ‡§™‡§∂‡•Å</p>
              <p className="text-2xl font-bold">{livestockData.healthyAnimals || 287}</p>
            </div>
            <Heart className="w-8 h-8 text-green-200" />
          </div>
        </div>
        
        <div className="bg-gradient-to-r from-blue-500 to-blue-600 rounded-xl p-4 text-white">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-blue-100">‡§ï‡•Å‡§≤ ‡§™‡§∂‡•Å</p>
              <p className="text-2xl font-bold">{livestockData.totalAnimals || 295}</p>
            </div>
            <Users className="w-8 h-8 text-blue-200" />
          </div>
        </div>
        
        <div className="bg-gradient-to-r from-orange-500 to-orange-600 rounded-xl p-4 text-white">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-orange-100">‡§Ü‡§ú ‡§ï‡•Ä ‡§Ü‡§Ø</p>
              <p className="text-2xl font-bold">‚Çπ28,450</p>
            </div>
            <DollarSign className="w-8 h-8 text-orange-200" />
          </div>
        </div>
        
        <div className="bg-gradient-to-r from-purple-500 to-purple-600 rounded-xl p-4 text-white">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-purple-100">AI ‡§Ö‡§≤‡§∞‡•ç‡§ü</p>
              <p className="text-2xl font-bold">{alerts.length}</p>
            </div>
            <Bell className="w-8 h-8 text-purple-200" />
          </div>
        </div>
      </div>

      {/* Live Video Monitoring */}
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        <div className="bg-white rounded-xl shadow-lg p-6">
          <div className="flex items-center justify-between mb-4">
            <h3 className="text-xl font-bold text-gray-800">‡§≤‡§æ‡§á‡§µ ‡§ï‡•à‡§Æ‡§∞‡§æ ‡§´‡•Ä‡§°</h3>
            <div className="flex items-center space-x-2">
              <button
                onClick={() => setIsVideoPlaying(!isVideoPlaying)}
                className="p-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600 transition-colors"
              >
                {isVideoPlaying ? <Pause className="w-4 h-4" /> : <Play className="w-4 h-4" />}
              </button>
              <button
                onClick={() => setAudioEnabled(!audioEnabled)}
                className="p-2 bg-gray-500 text-white rounded-lg hover:bg-gray-600 transition-colors"
              >
                {audioEnabled ? <Volume2 className="w-4 h-4" /> : <VolumeX className="w-4 h-4" />}
              </button>
            </div>
          </div>
          
          <div className="relative bg-gray-900 rounded-lg overflow-hidden h-64">
            <div className="absolute inset-0 flex items-center justify-center">
              {isVideoPlaying ? (
                <div className="text-center">
                  <Camera className="w-16 h-16 text-white mb-2 animate-pulse" />
                  <p className="text-white">‡§™‡§ø‡§ó ‡§´‡§æ‡§∞‡•ç‡§Æ ‡§∏‡•á‡§ï‡•ç‡§∂‡§® A - ‡§≤‡§æ‡§á‡§µ</p>
                  <div className="flex items-center justify-center mt-2 space-x-4">
                    <div className="flex items-center text-green-400">
                      <div className="w-2 h-2 bg-green-400 rounded-full animate-pulse mr-1"></div>
                      <span className="text-xs">AI ‡§Æ‡•â‡§®‡§ø‡§ü‡§∞‡§ø‡§Ç‡§ó</span>
                    </div>
                    <div className="text-white text-xs">
                      {new Date().toLocaleTimeString()}
                    </div>
                  </div>
                </div>
              ) : (
                <div className="text-center">
                  <Play className="w-16 h-16 text-gray-400 mb-2" />
                  <p className="text-gray-400">‡§µ‡•Ä‡§°‡§ø‡§Ø‡•ã ‡§∞‡•ã‡§ï‡§æ ‡§ó‡§Ø‡§æ</p>
                </div>
              )}
            </div>
            
            {/* AI Detection Overlays */}
            {isVideoPlaying && (
              <>
                <div className="absolute top-4 left-4 bg-green-500 text-white px-2 py-1 rounded text-xs">
                  15 ‡§∏‡•ç‡§µ‡§∏‡•ç‡§• ‡§™‡§∂‡•Å ‡§™‡§π‡§ö‡§æ‡§®‡•á ‡§ó‡§è
                </div>
                <div className="absolute bottom-4 right-4 bg-blue-500 text-white px-2 py-1 rounded text-xs flex items-center">
                  <Eye className="w-3 h-3 mr-1" />
                  AI ‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£: ‡§∏‡§æ‡§Æ‡§æ‡§®‡•ç‡§Ø
                </div>
                {/* Simulated detection boxes */}
                <div className="absolute top-16 left-8 border-2 border-green-400 w-12 h-8 animate-pulse"></div>
                <div className="absolute top-20 right-16 border-2 border-green-400 w-10 h-6 animate-pulse"></div>
                <div className="absolute bottom-16 left-12 border-2 border-yellow-400 w-14 h-10 animate-pulse"></div>
              </>
            )}
          </div>
          
          {/* Camera Controls */}
          <div className="mt-4 grid grid-cols-3 gap-2">
            <button className="p-2 bg-gray-100 rounded-lg text-center hover:bg-gray-200 transition-colors">
              <div className="text-xs font-medium">‡§∏‡•Å‡§Ö‡§∞ ‡§´‡§æ‡§∞‡•ç‡§Æ A</div>
            </button>
            <button className="p-2 bg-blue-100 rounded-lg text-center hover:bg-blue-200 transition-colors">
              <div className="text-xs font-medium">‡§™‡•ã‡§≤‡•ç‡§ü‡•ç‡§∞‡•Ä B</div>
            </button>
            <button className="p-2 bg-gray-100 rounded-lg text-center hover:bg-gray-200 transition-colors">
              <div className="text-xs font-medium">‡§¨‡§æ‡§π‡§∞‡•Ä ‡§ï‡•ç‡§∑‡•á‡§§‡•ç‡§∞</div>
            </button>
          </div>
        </div>

        {/* Environmental Monitoring */}
        <div className="bg-white rounded-xl shadow-lg p-6">
          <h3 className="text-xl font-bold text-gray-800 mb-4">‡§™‡§∞‡•ç‡§Ø‡§æ‡§µ‡§∞‡§£‡•Ä‡§Ø ‡§Æ‡•â‡§®‡§ø‡§ü‡§∞‡§ø‡§Ç‡§ó</h3>
          
          <div className="space-y-4">
            <div className="flex items-center justify-between p-3 bg-blue-50 rounded-lg">
              <div className="flex items-center">
                <Thermometer className="w-5 h-5 text-blue-600 mr-3" />
                <span className="font-medium">‡§§‡§æ‡§™‡§Æ‡§æ‡§®</span>
              </div>
              <div className="text-right">
                <div className="text-lg font-bold text-blue-600">
                  {(livestockData.temperature || 26).toFixed(1)}¬∞C
                </div>
                <div className="text-xs text-gray-500">‡§∏‡§æ‡§Æ‡§æ‡§®‡•ç‡§Ø</div>
              </div>
            </div>
            
            <div className="flex items-center justify-between p-3 bg-green-50 rounded-lg">
              <div className="flex items-center">
                <Droplets className="w-5 h-5 text-green-600 mr-3" />
                <span className="font-medium">‡§®‡§Æ‡•Ä</span>
              </div>
              <div className="text-right">
                <div className="text-lg font-bold text-green-600">
                  {(livestockData.humidity || 65).toFixed(0)}%
                </div>
                <div className="text-xs text-gray-500">‡§Ö‡§ö‡•ç‡§õ‡•Ä</div>
              </div>
            </div>
            
            <div className="flex items-center justify-between p-3 bg-purple-50 rounded-lg">
              <div className="flex items-center">
                <Wind className="w-5 h-5 text-purple-600 mr-3" />
                <span className="font-medium">‡§π‡§µ‡§æ ‡§ï‡•Ä ‡§ó‡•Å‡§£‡§µ‡§§‡•ç‡§§‡§æ</span>
              </div>
              <div className="text-right">
                <div className="text-lg font-bold text-purple-600">
                  {(livestockData.airQuality || 88).toFixed(0)}%
                </div>
                <div className="text-xs text-gray-500">‡§â‡§§‡•ç‡§ï‡•É‡§∑‡•ç‡§ü</div>
              </div>
            </div>
            
            <div className="flex items-center justify-between p-3 bg-orange-50 rounded-lg">
              <div className="flex items-center">
                <Battery className="w-5 h-5 text-orange-600 mr-3" />
                <span className="font-medium">‡§∏‡§ø‡§∏‡•ç‡§ü‡§Æ ‡§¨‡•à‡§ü‡§∞‡•Ä</span>
              </div>
              <div className="text-right">
                <div className="text-lg font-bold text-orange-600">
                  {livestockData.batteryLevel || 87}%
                </div>
                <div className="text-xs text-gray-500">‡§ö‡§æ‡§∞‡•ç‡§ú ‡§π‡•ã ‡§∞‡§π‡§æ</div>
              </div>
            </div>
            
            <div className="flex items-center justify-between p-3 bg-gray-50 rounded-lg">
              <div className="flex items-center">
                <Wifi className="w-5 h-5 text-gray-600 mr-3" />
                <span className="font-medium">‡§ï‡§®‡•á‡§ï‡•ç‡§ü‡§ø‡§µ‡§ø‡§ü‡•Ä</span>
              </div>
              <div className="text-right">
                <div className="text-lg font-bold text-gray-600">5G</div>
                <div className="text-xs text-gray-500">‡§Æ‡§ú‡§¨‡•Ç‡§§</div>
              </div>
            </div>
          </div>
        </div>
      </div>

      {/* Recent Alerts */}
      <div className="bg-white rounded-xl shadow-lg p-6">
        <h3 className="text-xl font-bold text-gray-800 mb-4">‡§π‡§æ‡§≤ ‡§ï‡•Ä ‡§ö‡•á‡§§‡§æ‡§µ‡§®‡§ø‡§Ø‡§æ‡§Ç</h3>
        
        <div className="space-y-3">
          {alerts.length === 0 ? (
            <div className="text-center py-8 text-gray-500">
              <Shield className="w-12 h-12 mx-auto mb-2 text-green-500" />
              <p>‡§ï‡•ã‡§à ‡§ö‡•á‡§§‡§æ‡§µ‡§®‡•Ä ‡§®‡§π‡•Ä‡§Ç - ‡§∏‡§¨ ‡§ï‡•Å‡§õ ‡§∏‡§æ‡§Æ‡§æ‡§®‡•ç‡§Ø ‡§π‡•à!</p>
            </div>
          ) : (
            alerts.map((alert) => (
              <div
                key={alert.id}
                className={`p-4 rounded-lg border-l-4 ${
                  alert.severity === 'high' ? 'bg-red-50 border-red-500' :
                  alert.severity === 'medium' ? 'bg-yellow-50 border-yellow-500' :
                  'bg-blue-50 border-blue-500'
                } ${alert.isNew ? 'animate-pulse' : ''}`}
              >
                <div className="flex items-center justify-between">
                  <div className="flex items-center">
                    <AlertTriangle className={`w-5 h-5 mr-3 ${
                      alert.severity === 'high' ? 'text-red-500' :
                      alert.severity === 'medium' ? 'text-yellow-500' :
                      'text-blue-500'
                    }`} />
                    <span className="font-medium">{alert.message}</span>
                  </div>
                  <div className="text-sm text-gray-500">{alert.timestamp}</div>
                </div>
                {alert.isNew && (
                  <div className="mt-2">
                    <span className="inline-block px-2 py-1 text-xs bg-green-500 text-white rounded">
                      ‡§®‡§Ø‡§æ ‡§Ö‡§≤‡§∞‡•ç‡§ü
                    </span>
                  </div>
                )}
              </div>
            ))
          )}
        </div>
      </div>
    </div>
  );

  const renderAnalytics = () => (
    <div className="space-y-6">
      {/* Health Analytics */}
      <div className="bg-white rounded-xl shadow-lg p-6">
        <h3 className="text-xl font-bold text-gray-800 mb-6">‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø ‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£</h3>
        
        <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
          <div className="text-center">
            <div className="w-20 h-20 mx-auto bg-green-100 rounded-full flex items-center justify-center mb-3">
              <TrendingUp className="w-10 h-10 text-green-600" />
            </div>
            <h4 className="font-bold text-lg">95.2%</h4>
            <p className="text-gray-600">‡§∏‡•ç‡§µ‡§∏‡•ç‡§• ‡§™‡§∂‡•Å ‡§¶‡§∞</p>
            <p className="text-sm text-green-600">+2.1% ‡§™‡§ø‡§õ‡§≤‡•á ‡§Æ‡§π‡•Ä‡§®‡•á ‡§∏‡•á</p>
          </div>
          
          <div className="text-center">
            <div className="w-20 h-20 mx-auto bg-blue-100 rounded-full flex items-center justify-center mb-3">
              <Activity className="w-10 h-10 text-blue-600" />
            </div>
            <h4 className="font-bold text-lg">72 ‡§ò‡§Ç‡§ü‡•á</h4>
            <p className="text-gray-600">‡§î‡§∏‡§§ ‡§™‡•Ç‡§∞‡•ç‡§µ ‡§ö‡•á‡§§‡§æ‡§µ‡§®‡•Ä</p>
            <p className="text-sm text-blue-600">‡§≤‡§ï‡•ç‡§∑‡§£ ‡§¶‡§ø‡§ñ‡§®‡•á ‡§∏‡•á ‡§™‡§π‡§≤‡•á</p>
          </div>
          
          <div className="text-center">
            <div className="w-20 h-20 mx-auto bg-purple-100 rounded-full flex items-center justify-center mb-3">
              <Zap className="w-10 h-10 text-purple-600" />
            </div>
            <h4 className="font-bold text-lg">‚Çπ26,500</h4>
            <p className="text-gray-600">‡§Æ‡§æ‡§∏‡§ø‡§ï ‡§≤‡§æ‡§≠ ‡§µ‡•É‡§¶‡•ç‡§ß‡§ø</p>
            <p className="text-sm text-purple-600">AVIHERD ‡§ï‡•á ‡§∏‡§æ‡§•</p>
          </div>
        </div>
      </div>

      {/* Productivity Metrics */}
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        <div className="bg-white rounded-xl shadow-lg p-6">
          <h4 className="text-lg font-bold text-gray-800 mb-4">‡§¶‡•à‡§®‡§ø‡§ï ‡§ó‡§§‡§ø‡§µ‡§ø‡§ß‡§ø</h4>
          
          <div className="space-y-4">
            <div>
              <div className="flex justify-between mb-2">
                <span>‡§ö‡§æ‡§∞‡§æ ‡§∏‡•á‡§µ‡§®</span>
                <span className="font-bold">{(livestockData.feedConsumption || 88).toFixed(0)}%</span>
              </div>
              <div className="w-full bg-gray-200 rounded-full h-2">
                <div 
                  className="bg-green-500 h-2 rounded-full" 
                  style={{ width: ${livestockData.feedConsumption || 88}% }}
                ></div>
              </div>
            </div>
            
            <div>
              <div className="flex justify-between mb-2">
                <span>‡§™‡§æ‡§®‡•Ä ‡§ï‡§æ ‡§∏‡•á‡§µ‡§®</span>
                <span className="font-bold">{(livestockData.waterConsumption || 92).toFixed(0)}%</span>
              </div>
              <div className="w-full bg-gray-200 rounded-full h-2">
                <div 
                  className="bg-blue-500 h-2 rounded-full" 
                  style={{ width: ${livestockData.waterConsumption || 92}% }}
                ></div>
              </div>
            </div>
            
            <div>
              <div className="flex justify-between mb-2">
                <span>‡§ó‡§§‡§ø‡§µ‡§ø‡§ß‡§ø ‡§∏‡•ç‡§§‡§∞</span>
                <span className="font-bold">85%</span>
              </div>
              <div className="w-full bg-gray-200 rounded-full h-2">
                <div className="bg-purple-500 h-2 rounded-full" style={{ width: '85%' }}></div>
              </div>
            </div>
            
            <div>
              <div className="flex justify-between mb-2">
                <span>‡§Ü‡§∞‡§æ‡§Æ ‡§ï‡•Ä ‡§ó‡•Å‡§£‡§µ‡§§‡•ç‡§§‡§æ</span>
                <span className="font-bold">78%</span>
              </div>
              <div className="w-full bg-gray-200 rounded-full h-2">
                <div className="bg-orange-500 h-2 rounded-full" style={{ width: '78%' }}></div>
              </div>
            </div>
          </div>
        </div>

        <div className="bg-white rounded-xl shadow-lg p-6">
          <h4 className="text-lg font-bold text-gray-800 mb-4">‡§µ‡§ø‡§§‡•ç‡§§‡•Ä‡§Ø ‡§™‡•ç‡§∞‡§≠‡§æ‡§µ</h4>
          
          <div className="space-y-6">
            <div className="p-4 bg-green-50 rounded-lg">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-green-800 font-medium">‡§Æ‡§æ‡§∏‡§ø‡§ï ‡§Ü‡§Ø</p>
                  <p className="text-2xl font-bold text-green-600">‚Çπ35,000</p>
                </div>
                <TrendingUp className="w-8 h-8 text-green-500" />
              </div>
              <p className="text-sm text-green-600 mt-2">+133% ‡§µ‡•É‡§¶‡•ç‡§ß‡§ø</p>
            </div>
            
            <div className="p-4 bg-red-50 rounded-lg">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-red-800 font-medium">‡§¨‡§ö‡§§ (‡§¨‡•Ä‡§Æ‡§æ‡§∞‡•Ä ‡§∏‡•á)</p>
                  <p className="text-2xl font-bold text-red-600">‚Çπ14,500</p>
                </div>
                <Shield className="w-8 h-8 text-red-500" />
              </div>
              <p className="text-sm text-red-600 mt-2">‡§™‡•ç‡§∞‡§§‡§ø ‡§Æ‡§æ‡§π ‡§¨‡§ö‡§§</p>
            </div>
            
            <div className="p-4 bg-blue-50 rounded-lg">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-blue-800 font-medium">ROI</p>
                  <p className="text-2xl font-bold text-blue-600">530%</p>
                </div>
                <DollarSign className="w-8 h-8 text-blue-500" />
              </div>
              <p className="text-sm text-blue-600 mt-2">6 ‡§Æ‡§π‡•Ä‡§®‡•á ‡§Æ‡•á‡§Ç ‡§™‡•Ç‡§∞‡•ç‡§£ ‡§∞‡§ø‡§ü‡§∞‡•ç‡§®</p>
            </div>
          </div>
        </div>
      </div>
    </div>
  );

  const renderChatbot = () => (
    <div className="max-w-4xl mx-auto">
      <div className="bg-white rounded-xl shadow-lg overflow-hidden">
        {/* Chat Header */}
        <div className="bg-gradient-to-r from-blue-600 to-purple-600 p-4">
          <div className="flex items-center justify-between">
            <div className="flex items-center">
              <div className="w-10 h-10 bg-white rounded-full flex items-center justify-center mr-3">
                <MessageCircle className="w-6 h-6 text-blue-600" />
              </div>
              <div>
                <h3 className="text-white font-bold">AVIHERD AI ‡§∏‡§π‡§æ‡§Ø‡§ï</h3>
                <p className="text-blue-100 text-sm">24/7 ‡§â‡§™‡§≤‡§¨‡•ç‡§ß ‚Ä¢ ‡§¨‡§π‡•Å‡§≠‡§æ‡§∑‡•Ä ‡§∏‡§Æ‡§∞‡•ç‡§•‡§®</p>
              </div>
            </div>
            
            <div className="flex items-center space-x-2">
              <select
                value={selectedLanguage}
                onChange={(e) => setSelectedLanguage(e.target.value)}
                className="bg-white text-gray-800 px-3 py-1 rounded-lg text-sm"
              >
                {Object.entries(languages).map(([key, lang]) => (
                  <option key={key} value={key}>
                    {lang.flag} {lang.name}
                  </option>
                ))}
              </select>
            </div>
          </div>
        </div>

        {/* Chat Messages */}
        <div className="h-96 overflow-y-auto p-4 bg-gray-50">
          <div className="space-y-4">
            {chatMessages.map((message) => (
              <div
                key={message.id}
                className={flex ${message.sender === 'user' ? 'justify-end' : 'justify-start'}}
              >
                <div
                  className={`max-w-xs lg:max-w-md px-4 py-2 rounded-lg ${
                    message.sender === 'user'
                      ? 'bg-blue-600 text-white'
                      : 'bg-white text-gray-800 shadow-md'
                  }`}
                >
                  <p className="text-sm">{message.message}</p>
                  {message.translation && (
                    <p className="text-xs opacity-75 mt-1 italic">{message.translation}</p>
                  )}
                  <p className="text-xs opacity-75 mt-1">{message.timestamp}</p>
                </div>
              </div>
            ))}
          </div>
        </div>

        {/* Chat Input */}
        <div className="p-4 border-t">
          <div className="flex items-center space-x-2">
            <div className="flex-1 relative">
              <input
                type="text"
                value={currentMessage}
                onChange={(e) => setCurrentMessage(e.target.value)}
                onKeyPress={(e) => e.key === 'Enter' && handleSendMessage()}
                placeholder="‡§Ö‡§™‡§®‡§æ ‡§™‡•ç‡§∞‡§∂‡•ç‡§® ‡§ü‡§æ‡§á‡§™ ‡§ï‡§∞‡•á‡§Ç ‡§Ø‡§æ ‡§µ‡•â‡§á‡§∏ ‡§∞‡§ø‡§ï‡•â‡§∞‡•ç‡§° ‡§ï‡§∞‡•á‡§Ç..."
                className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
              />
              {isRecording && (
                <div className="absolute right-3 top-2">
                  <div className="flex items-center space-x-1">
                    <div className="w-2 h-2 bg-red-500 rounded-full animate-pulse"></div>
                    <span className="text-xs text-red-500">‡§∞‡§ø‡§ï‡•â‡§∞‡•ç‡§° ‡§π‡•ã ‡§∞‡§π‡§æ ‡§π‡•à...</span>
                  </div>
                </div>
              )}
            </div>
            
            <button
              onClick={handleVoiceRecord}
              className={`p-2 rounded-lg transition-colors ${
                isRecording 
                  ? 'bg-red-500 text-white animate-pulse' 
                  : 'bg-gray-200 text-gray-600 hover:bg-gray-300'
              }`}
            >
              <Mic className="w-5 h-5" />
            </button>
            
            <button
              onClick={handleSendMessage}
              className="p-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors"
            >
              <Send className="w-5 h-5" />
            </button>
          </div>
          
          {/* Quick Questions */}
          <div className="mt-3">
            <p className="text-xs text-gray-500 mb-2">‡§§‡•ç‡§µ‡§∞‡§ø‡§§ ‡§™‡•ç‡§∞‡§∂‡•ç‡§®:</p>
            <div className="flex flex-wrap gap-2">
              {[
                '‡§™‡§∂‡•Å‡§ì‡§Ç ‡§ï‡•Ä ‡§∏‡•á‡§π‡§§ ‡§ï‡•à‡§∏‡•Ä ‡§π‡•à?',
                '‡§Ü‡§ú ‡§ï‡•ã‡§à ‡§ö‡•á‡§§‡§æ‡§µ‡§®‡•Ä ‡§π‡•à?',
                '‡§´‡§º‡•Ä‡§° ‡§ï‡•Ä ‡§Æ‡§æ‡§§‡•ç‡§∞‡§æ ‡§†‡•Ä‡§ï ‡§π‡•à?',
                '‡§§‡§æ‡§™‡§Æ‡§æ‡§® ‡§∏‡§æ‡§Æ‡§æ‡§®‡•ç‡§Ø ‡§π‡•à?'
              ].map((question, index) => (
                <button
                  key={index}
                  onClick={() => setCurrentMessage(question)}
                  className="px-3 py-1 text-xs bg-blue-100 text-blue-600 rounded-full hover:bg-blue-200 transition-colors"
                >
                  {question}
                </button>
              ))}
            </div>
          </div>
        </div>
      </div>
    </div>
  );

  const renderVetDashboard = () => (
    <div className="space-y-6">
      {/* Vet Header */}
      <div className="bg-gradient-to-r from-green-600 to-blue-600 rounded-xl p-6 text-white">
        <div className="flex items-center justify-between">
          <div>
            <h2 className="text-2xl font-bold">‡§°‡•â. ‡§∞‡§æ‡§ú‡•á‡§∂ ‡§∂‡§∞‡•ç‡§Æ‡§æ</h2>
            <p className="text-green-100">‡§™‡§∂‡•Å ‡§ö‡§ø‡§ï‡§ø‡§§‡•ç‡§∏‡§ï ‚Ä¢ ‡§≤‡§æ‡§á‡§∏‡•á‡§Ç‡§∏: VET2024-001</p>
            <p className="text-green-100">85 ‡§´‡§æ‡§∞‡•ç‡§Æ ‡§Æ‡•â‡§®‡§ø‡§ü‡§∞ ‡§ï‡§∞ ‡§∞‡§π‡•á ‡§π‡•à‡§Ç</p>
          </div>
          <div className="text-right">
            <div className="bg-white bg-opacity-20 rounded-lg p-3">
              <p className="text-sm">‡§Ü‡§ú ‡§ï‡•Ä ‡§Ü‡§™‡§æ‡§§‡§ï‡§æ‡§≤‡•Ä‡§® ‡§ï‡•â‡§≤</p>
              <p className="text-2xl font-bold">3</p>
            </div>
          </div>
        </div>
      </div>

      {/* Priority Alerts for Vet */}
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        <div className="bg-white rounded-xl shadow-lg p-6">
          <h3 className="text-xl font-bold text-gray-800 mb-4">‡§â‡§ö‡•ç‡§ö ‡§™‡•ç‡§∞‡§æ‡§•‡§Æ‡§ø‡§ï‡§§‡§æ ‡§Ö‡§≤‡§∞‡•ç‡§ü</h3>
          
          <div className="space-y-4">
            <div className="p-4 border-l-4 border-red-500 bg-red-50 rounded">
              <div className="flex items-center justify-between mb-2">
                <span className="font-medium text-red-800">‡§∞‡§æ‡§Æ ‡§∏‡§ø‡§Ç‡§π ‡§ï‡§æ ‡§´‡§æ‡§∞‡•ç‡§Æ</span>
                <span className="text-xs text-red-600">2 ‡§Æ‡§ø‡§®‡§ü ‡§™‡§π‡§≤‡•á</span>
              </div>
              <p className="text-sm text-red-700">15 ‡§∏‡•Ç‡§Ö‡§∞‡•ã‡§Ç ‡§Æ‡•á‡§Ç ‡§¨‡•Å‡§ñ‡§æ‡§∞ ‡§ï‡•á ‡§≤‡§ï‡•ç‡§∑‡§£ - ‡§§‡§§‡•ç‡§ï‡§æ‡§≤ ‡§ß‡•ç‡§Ø‡§æ‡§® ‡§¶‡•á‡§Ç</p>
              <div className="mt-3 flex space-x-2">
                <button className="px-3 py-1 bg-red-600 text-white text-xs rounded hover:bg-red-700">
                  ‡§§‡§§‡•ç‡§ï‡§æ‡§≤ ‡§ï‡•â‡§≤ ‡§ï‡§∞‡•á‡§Ç
                </button>
                <button className="px-3 py-1 bg-white text-red-600 border border-red-600 text-xs rounded hover:bg-red-50">
                  ‡§∞‡§ø‡§™‡•ã‡§∞‡•ç‡§ü ‡§¶‡•á‡§ñ‡•á‡§Ç
                </button>
              </div>
            </div>
            
            <div className="p-4 border-l-4 border-yellow-500 bg-yellow-50 rounded">
              <div className="flex items-center justify-between mb-2">
                <span className="font-medium text-yellow-800">‡§∏‡•Å‡§®‡•Ä‡§§‡§æ ‡§¶‡•á‡§µ‡•Ä ‡§ï‡§æ ‡§´‡§æ‡§∞‡•ç‡§Æ</span>
                <span className="text-xs text-yellow-600">15 ‡§Æ‡§ø‡§®‡§ü ‡§™‡§π‡§≤‡•á</span>
              </div>
              <p className="text-sm text-yellow-700">‡§Æ‡•Å‡§∞‡•ç‡§ó‡§ø‡§Ø‡•ã‡§Ç ‡§Æ‡•á‡§Ç ‡§Ö‡§∏‡§æ‡§Æ‡§æ‡§®‡•ç‡§Ø ‡§µ‡•ç‡§Ø‡§µ‡§π‡§æ‡§∞ - ‡§∏‡§Ç‡§≠‡§æ‡§µ‡§ø‡§§ ‡§∏‡§Ç‡§ï‡•ç‡§∞‡§Æ‡§£</p>
              <div className="mt-3 flex space-x-2">
                <button className="px-3 py-1 bg-yellow-600 text-white text-xs rounded hover:bg-yellow-700">
                  ‡§ï‡•â‡§≤ ‡§∂‡•á‡§°‡•ç‡§Ø‡•Ç‡§≤ ‡§ï‡§∞‡•á‡§Ç
                </button>
                <button className="px-3 py-1 bg-white text-yellow-600 border border-yellow-600 text-xs rounded hover:bg-yellow-50">
                  ‡§µ‡•Ä‡§°‡§ø‡§Ø‡•ã ‡§¶‡•á‡§ñ‡•á‡§Ç
                </button>
              </div>
            </div>
            
            <div className="p-4 border-l-4 border-blue-500 bg-blue-50 rounded">
              <div className="flex items-center justify-between mb-2">
                <span className="font-medium text-blue-800">‡§µ‡§ø‡§ï‡§æ‡§∏ ‡§Ø‡§æ‡§¶‡§µ ‡§ï‡§æ ‡§´‡§æ‡§∞‡•ç‡§Æ</span>
                <span className="text-xs text-blue-600">1 ‡§ò‡§Ç‡§ü‡§æ ‡§™‡§π‡§≤‡•á</span>
              </div>
              <p className="text-sm text-blue-700">‡§¶‡•à‡§®‡§ø‡§ï ‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø ‡§∞‡§ø‡§™‡•ã‡§∞‡•ç‡§ü ‡§∏‡§Æ‡•Ä‡§ï‡•ç‡§∑‡§æ ‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï</p>
              <div className="mt-3 flex space-x-2">
                <button className="px-3 py-1 bg-blue-600 text-white text-xs rounded hover:bg-blue-700">
                  ‡§∞‡§ø‡§™‡•ã‡§∞‡•ç‡§ü ‡§∏‡§Æ‡•Ä‡§ï‡•ç‡§∑‡§æ ‡§ï‡§∞‡•á‡§Ç
                </button>
              </div>
            </div>
          </div>
        </div>

        {/* Farm Health Overview */}
        <div className="bg-white rounded-xl shadow-lg p-6">
          <h3 className="text-xl font-bold text-gray-800 mb-4">‡§´‡§æ‡§∞‡•ç‡§Æ ‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø ‡§Ö‡§µ‡§≤‡•ã‡§ï‡§®</h3>
          
          <div className="space-y-6">
            <div className="text-center">
              <div className="relative w-32 h-32 mx-auto mb-4">
                <svg className="w-32 h-32 transform -rotate-90" viewBox="0 0 120 120">
                  <circle
                    cx="60"
                    cy="60"
                    r="54"
                    stroke="#e5e7eb"
                    strokeWidth="12"
                    fill="none"
                  />
                  <circle
                    cx="60"
                    cy="60"
                    r="54"
                    stroke="#10b981"
                    strokeWidth="12"
                    fill="none"
                    strokeDasharray={${(95.2 * 339.29) / 100} 339.29}
                    className="transition-all duration-1000"
                  />
                </svg>
                <div className="absolute inset-0 flex items-center justify-center">
                  <div className="text-center">
                    <div className="text-2xl font-bold text-green-600">95.2%</div>
                    <div className="text-xs text-gray-500">‡§∏‡•ç‡§µ‡§∏‡•ç‡§•</div>
                  </div>
                </div>
              </div>
              <p className="text-gray-600">‡§ï‡•Å‡§≤ ‡§Æ‡§ø‡§≤‡§æ‡§ï‡§∞ ‡§´‡§æ‡§∞‡•ç‡§Æ ‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø ‡§∏‡•ç‡§ï‡•ã‡§∞</p>
            </div>
            
            <div className="grid grid-cols-2 gap-4">
              <div className="text-center p-3 bg-green-50 rounded-lg">
                <div className="text-lg font-bold text-green-600">82</div>
                <div className="text-xs text-gray-600">‡§∏‡•ç‡§µ‡§∏‡•ç‡§• ‡§´‡§æ‡§∞‡•ç‡§Æ</div>
              </div>
              <div className="text-center p-3 bg-yellow-50 rounded-lg">
                <div className="text-lg font-bold text-yellow-600">3</div>
                <div className="text-xs text-gray-600">‡§®‡§ø‡§ó‡§∞‡§æ‡§®‡•Ä ‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï</div>
              </div>
            </div>
          </div>
        </div>
      </div>

      {/* Recent Treatments */}
      <div className="bg-white rounded-xl shadow-lg p-6">
        <h3 className="text-xl font-bold text-gray-800 mb-4">‡§π‡§æ‡§≤ ‡§ï‡§æ ‡§â‡§™‡§ö‡§æ‡§∞ ‡§á‡§§‡§ø‡§π‡§æ‡§∏</h3>
        
        <div className="overflow-x-auto">
          <table className="w-full">
            <thead>
              <tr className="border-b">
                <th className="text-left py-3 px-4">‡§´‡§æ‡§∞‡•ç‡§Æ‡§∞ ‡§ï‡§æ ‡§®‡§æ‡§Æ</th>
                <th className="text-left py-3 px-4">‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ</th>
                <th className="text-left py-3 px-4">‡§â‡§™‡§ö‡§æ‡§∞</th>
                <th className="text-left py-3 px-4">‡§∏‡•ç‡§•‡§ø‡§§‡§ø</th>
                <th className="text-left py-3 px-4">‡§¶‡§ø‡§®‡§æ‡§Ç‡§ï</th>
              </tr>
            </thead>
            <tbody>
              <tr className="border-b">
                <td className="py-3 px-4">‡§∞‡§æ‡§Æ ‡§∏‡§ø‡§Ç‡§π</td>
                <td className="py-3 px-4">‡§∂‡•ç‡§µ‡§∏‡§® ‡§∏‡§Ç‡§ï‡•ç‡§∞‡§Æ‡§£</td>
                <td className="py-3 px-4">‡§è‡§Ç‡§ü‡•Ä‡§¨‡§æ‡§Ø‡•ã‡§ü‡§ø‡§ï ‡§ï‡•ã‡§∞‡•ç‡§∏</td>
                <td className="py-3 px-4">
                  <span className="px-2 py-1 bg-green-100 text-green-800 text-xs rounded">‡§†‡•Ä‡§ï ‡§π‡•ã ‡§∞‡§π‡§æ</span>
                </td>
                <td className="py-3 px-4">15 ‡§¶‡§ø‡§∏‡§Ç‡§¨‡§∞</td>
              </tr>
              <tr className="border-b">
                <td className="py-3 px-4">‡§∏‡•Å‡§®‡•Ä‡§§‡§æ ‡§¶‡•á‡§µ‡•Ä</td>
                <td className="py-3 px-4">‡§™‡§æ‡§ö‡§® ‡§∏‡§Ç‡§¨‡§Ç‡§ß‡•Ä ‡§µ‡§ø‡§ï‡§æ‡§∞</td>
                <td className="py-3 px-4">‡§Ü‡§π‡§æ‡§∞ ‡§Æ‡•á‡§Ç ‡§™‡§∞‡§ø‡§µ‡§∞‡•ç‡§§‡§®</td>
                <td className="py-3 px-4">
                  <span className="px-2 py-1 bg-blue-100 text-blue-800 text-xs rounded">‡§®‡§ø‡§ó‡§∞‡§æ‡§®‡•Ä ‡§Æ‡•á‡§Ç</span>
                </td>
                <td className="py-3 px-4">12 ‡§¶‡§ø‡§∏‡§Ç‡§¨‡§∞</td>
              </tr>
              <tr className="border-b">
                <td className="py-3 px-4">‡§µ‡§ø‡§ï‡§æ‡§∏ ‡§Ø‡§æ‡§¶‡§µ</td>
                <td className="py-3 px-4">‡§§‡•ç‡§µ‡§ö‡§æ ‡§∏‡§Ç‡§ï‡•ç‡§∞‡§Æ‡§£</td>
                <td className="py-3 px-4">‡§ü‡•â‡§™‡§ø‡§ï‡§≤ ‡§¶‡§µ‡§æ</td>
                <td className="py-3 px-4">
                  <span className="px-2 py-1 bg-green-100 text-green-800 text-xs rounded">‡§™‡•Ç‡§∞‡•ç‡§£ ‡§†‡•Ä‡§ï</span>
                </td>
                <td className="py-3 px-4">8 ‡§¶‡§ø‡§∏‡§Ç‡§¨‡§∞</td>
              </tr>
            </tbody>
          </table>
        </div>
      </div>
    </div>
  );

  const renderSettings = () => (
    <div className="max-w-4xl mx-auto space-y-6">
      {/* Profile Settings */}
      <div className="bg-white rounded-xl shadow-lg p-6">
        <h3 className="text-xl font-bold text-gray-800 mb-4">‡§™‡•ç‡§∞‡•ã‡§´‡§æ‡§á‡§≤ ‡§∏‡•á‡§ü‡§ø‡§Ç‡§ó‡•ç‡§∏</h3>
        
        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">‡§®‡§æ‡§Æ</label>
            <input 
              type="text" 
              defaultValue="‡§∞‡§æ‡§ú‡•á‡§∂ ‡§ï‡•Å‡§Æ‡§æ‡§∞" 
              className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
            />
          </div>
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">‡§Æ‡•ã‡§¨‡§æ‡§á‡§≤ ‡§®‡§Ç‡§¨‡§∞</label>
            <input 
              type="tel" 
              defaultValue="+91 9876543210" 
              className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
            />
          </div>
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">‡§´‡§æ‡§∞‡•ç‡§Æ ‡§ï‡§æ ‡§®‡§æ‡§Æ</label>
            <input 
              type="text" 
              defaultValue="‡§∂‡•ç‡§∞‡•Ä ‡§∞‡§æ‡§Æ ‡§≤‡§æ‡§á‡§µ‡§∏‡•ç‡§ü‡•â‡§ï ‡§´‡§æ‡§∞‡•ç‡§Æ" 
              className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
            />
          </div>
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">‡§∏‡•ç‡§•‡§æ‡§®</label>
            <input 
              type="text" 
              defaultValue="‡§≤‡•Å‡§ß‡§ø‡§Ø‡§æ‡§®‡§æ, ‡§™‡§Ç‡§ú‡§æ‡§¨" 
              className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
            />
          </div>
        </div>
      </div>

      {/* Alert Preferences */}
      <div className="bg-white rounded-xl shadow-lg p-6">
        <h3 className="text-xl font-bold text-gray-800 mb-4">‡§Ö‡§≤‡§∞‡•ç‡§ü ‡§™‡•ç‡§∞‡§æ‡§•‡§Æ‡§ø‡§ï‡§§‡§æ‡§è‡§Ç</h3>
        
        <div className="space-y-4">
          <div className="flex items-center justify-between">
            <span className="text-gray-700">‡§§‡§§‡•ç‡§ï‡§æ‡§≤ ‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø ‡§Ö‡§≤‡§∞‡•ç‡§ü</span>
            <label className="relative inline-flex items-center cursor-pointer">
              <input type="checkbox" defaultChecked className="sr-only peer" />
              <div className="w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-300 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-blue-600"></div>
            </label>
          </div>
          
          <div className="flex items-center justify-between">
            <span className="text-gray-700">‡§™‡§∞‡•ç‡§Ø‡§æ‡§µ‡§∞‡§£‡•Ä‡§Ø ‡§ö‡•á‡§§‡§æ‡§µ‡§®‡§ø‡§Ø‡§æ‡§Ç</span>
            <label className="relative inline-flex items-center cursor-pointer">
              <input type="checkbox" defaultChecked className="sr-only peer" />
              <div className="w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-300 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-blue-600"></div>
            </label>
          </div>
          
          <div className="flex items-center justify-between">
            <span className="text-gray-700">‡§¶‡•à‡§®‡§ø‡§ï ‡§∞‡§ø‡§™‡•ã‡§∞‡•ç‡§ü</span>
            <label className="relative inline-flex items-center cursor-pointer">
              <input type="checkbox" defaultChecked className="sr-only peer" />
              <div className="w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-300 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-blue-600"></div>
            </label>
          </div>
          
          <div className="flex items-center justify-between">
            <span className="text-gray-700">‡§∏‡§æ‡§™‡•ç‡§§‡§æ‡§π‡§ø‡§ï ‡§∏‡§æ‡§∞‡§æ‡§Ç‡§∂</span>
            <label className="relative inline-flex items-center cursor-pointer">
              <input type="checkbox" className="sr-only peer" />
              <div className="w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-300 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-blue-600"></div>
            </label>
          </div>
        </div>
      </div>

      {/* System Configuration */}
      <div className="bg-white rounded-xl shadow-lg p-6">
        <h3 className="text-xl font-bold text-gray-800 mb-4">‡§∏‡§ø‡§∏‡•ç‡§ü‡§Æ ‡§ï‡•â‡§®‡•ç‡§´‡§º‡§ø‡§ó‡§∞‡•á‡§∂‡§®</h3>
        
        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">‡§ï‡•à‡§Æ‡§∞‡§æ ‡§∞‡§ø‡§ú‡§º‡•â‡§≤‡•ç‡§Ø‡•Ç‡§∂‡§®</label>
            <select className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500">
              <option value="4k">4K (‡§Ö‡§®‡•Å‡§∂‡§Ç‡§∏‡§ø‡§§)</option>
              <option value="1080p">1080p</option>
              <option value="720p">720p</option>
            </select>
          </div>
          
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">AI ‡§∏‡§Ç‡§µ‡•á‡§¶‡§®‡§∂‡•Ä‡§≤‡§§‡§æ</label>
            <select className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500">
              <option value="high">‡§â‡§ö‡•ç‡§ö</option>
              <option value="medium" selected>‡§Æ‡§ß‡•ç‡§Ø‡§Æ (‡§Ö‡§®‡•Å‡§∂‡§Ç‡§∏‡§ø‡§§)</option>
              <option value="low">‡§ï‡§Æ</option>
            </select>
          </div>
          
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">‡§°‡•á‡§ü‡§æ ‡§≠‡§Ç‡§°‡§æ‡§∞‡§£</label>
            <select className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500">
              <option value="7days">7 ‡§¶‡§ø‡§® ‡§∏‡•ç‡§•‡§æ‡§®‡•Ä‡§Ø</option>
              <option value="30days" selected>30 ‡§¶‡§ø‡§® ‡§∏‡•ç‡§•‡§æ‡§®‡•Ä‡§Ø</option>
              <option value="cloud">‡§ï‡•ç‡§≤‡§æ‡§â‡§° ‡§¨‡•à‡§ï‡§Ö‡§™</option>
            </select>
          </div>
          
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">‡§≠‡§æ‡§∑‡§æ ‡§™‡•ç‡§∞‡§æ‡§•‡§Æ‡§ø‡§ï‡§§‡§æ</label>
            <select className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500">
              <option value="hindi" selected>‡§π‡§ø‡§Ç‡§¶‡•Ä</option>
              <option value="punjabi">‡§™‡§Ç‡§ú‡§æ‡§¨‡•Ä</option>
              <option value="english">English</option>
            </select>
          </div>
        </div>
      </div>

      {/* Emergency Contacts */}
      <div className="bg-white rounded-xl shadow-lg p-6">
        <h3 className="text-xl font-bold text-gray-800 mb-4">‡§Ü‡§™‡§æ‡§§‡§ï‡§æ‡§≤‡•Ä‡§® ‡§∏‡§Ç‡§™‡§∞‡•ç‡§ï</h3>
        
        <div className="space-y-4">
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">‡§™‡§∂‡•Å ‡§ö‡§ø‡§ï‡§ø‡§§‡•ç‡§∏‡§ï</label>
              <input 
                type="text" 
                defaultValue="‡§°‡•â. ‡§∞‡§æ‡§ú‡•á‡§∂ ‡§∂‡§∞‡•ç‡§Æ‡§æ" 
                className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
              />
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">‡§Æ‡•ã‡§¨‡§æ‡§á‡§≤ ‡§®‡§Ç‡§¨‡§∞</label>
              <input 
                type="tel" 
                defaultValue="+91 9876543210" 
                className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
              />
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">‡§∏‡•ç‡§•‡§ø‡§§‡§ø</label>
              <div className="flex items-center h-10">
                <span className="inline-flex items-center px-3 py-1 bg-green-100 text-green-800 text-sm rounded-full">
                  <div className="w-2 h-2 bg-green-500 rounded-full mr-2"></div>
                  ‡§∏‡§ï‡•ç‡§∞‡§ø‡§Ø
                </span>
              </div>
            </div>
          </div>
        </div>
      </div>

      {/* Save Button */}
      <div className="flex justify-end">
        <button className="px-6 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors font-medium">
          ‡§∏‡•á‡§ü‡§ø‡§Ç‡§ó‡•ç‡§∏ ‡§∏‡§π‡•á‡§ú‡•á‡§Ç
        </button>
      </div>
    </div>
  );

  const navigation = [
    { id: 'dashboard', name: '‡§°‡•à‡§∂‡§¨‡•ã‡§∞‡•ç‡§°', icon: Home, component: renderDashboard },
    { id: 'analytics', name: '‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£', icon: BarChart3, component: renderAnalytics },
    { id: 'chatbot', name: 'AI ‡§∏‡§π‡§æ‡§Ø‡§ï', icon: MessageCircle, component: renderChatbot },
    { id: 'vet', name: '‡§™‡§∂‡•Å ‡§ö‡§ø‡§ï‡§ø‡§§‡•ç‡§∏‡§ï', icon: User, component: renderVetDashboard },
    { id: 'settings', name: '‡§∏‡•á‡§ü‡§ø‡§Ç‡§ó‡•ç‡§∏', icon: Settings, component: renderSettings },
  ];

  return (
    <div className="min-h-screen bg-gray-100">
      {/* Header */}
      <header className="bg-white shadow-md">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex justify-between items-center h-16">
            <div className="flex items-center">
              <div className="flex-shrink-0">
                <div className="flex items-center">
                  <div className="w-8 h-8 bg-gradient-to-r from-green-500 to-blue-500 rounded-full flex items-center justify-center mr-3">
                    <Activity className="w-5 h-5 text-white" />
                  </div>
                  <h1 className="text-xl font-bold bg-gradient-to-r from-green-600 to-blue-600 bg-clip-text text-transparent">
                    AVIHERD
                  </h1>
                </div>
              </div>
            </div>
            
            <div className="flex items-center space-x-4">
              {/* Real-time indicators */}
              <div className="hidden sm:flex items-center space-x-4">
                <div className="flex items-center text-green-600">
                  <div className="w-2 h-2 bg-green-500 rounded-full animate-pulse mr-2"></div>
                  <span className="text-sm">‡§≤‡§æ‡§á‡§µ ‡§Æ‡•â‡§®‡§ø‡§ü‡§∞‡§ø‡§Ç‡§ó</span>
                </div>
                <div className="flex items-center text-blue-600">
                  <Wifi className="w-4 h-4 mr-1" />
                  <span className="text-sm">‡§ï‡§®‡•á‡§ï‡•ç‡§ü‡•á‡§°</span>
                </div>
                <div className="flex items-center text-orange-600">
                  <Battery className="w-4 h-4 mr-1" />
                  <span className="text-sm">87%</span>
                </div>
              </div>
              
              {/* Notification Bell */}
              <div className="relative">
                <button className="p-2 text-gray-600 hover:text-gray-800 hover:bg-gray-100 rounded-full transition-colors">
                  <Bell className="w-5 h-5" />
                  {alerts.length > 0 && (
                    <span className="absolute -top-1 -right-1 w-5 h-5 bg-red-500 text-white text-xs rounded-full flex items-center justify-center animate-pulse">
                      {alerts.length}
                    </span>
                  )}
                </button>
              </div>
              
              {/* User Profile */}
              <div className="flex items-center">
                <div className="w-8 h-8 bg-gray-300 rounded-full flex items-center justify-center">
                  <User className="w-5 h-5 text-gray-600" />
                </div>
                <span className="ml-2 text-sm font-medium text-gray-700 hidden sm:block">‡§∞‡§æ‡§ú‡•á‡§∂ ‡§ï‡•Å‡§Æ‡§æ‡§∞</span>
              </div>
            </div>
          </div>
        </div>
      </header>

      <div className="flex">
        {/* Sidebar */}
        <nav className="w-64 bg-white shadow-lg min-h-screen">
          <div className="py-6">
            <div className="px-6">
              <div className="text-center mb-6">
                <div className="w-16 h-16 bg-gradient-to-r from-green-500 to-blue-500 rounded-full mx-auto mb-2 flex items-center justify-center">
                  <Activity className="w-8 h-8 text-white" />
                </div>
                <p className="text-sm text-gray-600">‡§∂‡•ç‡§∞‡•Ä ‡§∞‡§æ‡§Æ ‡§≤‡§æ‡§á‡§µ‡§∏‡•ç‡§ü‡•â‡§ï ‡§´‡§æ‡§∞‡•ç‡§Æ</p>
                <p className="text-xs text-gray-500">‡§≤‡•Å‡§ß‡§ø‡§Ø‡§æ‡§®‡§æ, ‡§™‡§Ç‡§ú‡§æ‡§¨</p>
              </div>
            </div>
            
            <ul className="space-y-2 px-4">
              {navigation.map((item) => {
                const Icon = item.icon;
                return (
                  <li key={item.id}>
                    <button
                      onClick={() => setCurrentView(item.id)}
                      className={`w-full flex items-center px-4 py-3 text-left rounded-lg transition-colors ${
                        currentView === item.id
                          ? 'bg-blue-600 text-white'
                          : 'text-gray-700 hover:bg-gray-100'
                      }`}
                    >
                      <Icon className="w-5 h-5 mr-3" />
                      {item.name}
                    </button>
                  </li>
                );
              })}
            </ul>
          </div>
        </nav>

        {/* Main Content */}
        <main className="flex-1 p-6">
          {navigation.find(nav => nav.id === currentView)?.component()}
        </main>
      </div>

      {/* Emergency Call Button */}
      <div className="fixed bottom-6 right-6">
        <button className="w-16 h-16 bg-red-500 text-white rounded-full shadow-lg hover:bg-red-600 transition-all duration-300 hover:scale-110 flex items-center justify-center animate-pulse">
          <Phone className="w-8 h-8" />
        </button>
      </div>
    </div>
  );
};

export default AVIHERD_PROTOTYPE;